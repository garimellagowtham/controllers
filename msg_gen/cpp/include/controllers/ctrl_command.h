/* Auto-generated by genmsg_cpp for file /home/gowtham/fuerte_workspace/sandbox/controllers/msg/ctrl_command.msg */
#ifndef CONTROLLERS_MESSAGE_CTRL_COMMAND_H
#define CONTROLLERS_MESSAGE_CTRL_COMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace controllers
{
template <class ContainerAllocator>
struct ctrl_command_ {
  typedef ctrl_command_<ContainerAllocator> Type;

  ctrl_command_()
  : roll(0.0)
  , pitch(0.0)
  , rateyaw(0.0)
  , thrust(0.0)
  {
  }

  ctrl_command_(const ContainerAllocator& _alloc)
  : roll(0.0)
  , pitch(0.0)
  , rateyaw(0.0)
  , thrust(0.0)
  {
  }

  typedef double _roll_type;
  double roll;

  typedef double _pitch_type;
  double pitch;

  typedef double _rateyaw_type;
  double rateyaw;

  typedef double _thrust_type;
  double thrust;


  typedef boost::shared_ptr< ::controllers::ctrl_command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controllers::ctrl_command_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ctrl_command
typedef  ::controllers::ctrl_command_<std::allocator<void> > ctrl_command;

typedef boost::shared_ptr< ::controllers::ctrl_command> ctrl_commandPtr;
typedef boost::shared_ptr< ::controllers::ctrl_command const> ctrl_commandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::controllers::ctrl_command_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::controllers::ctrl_command_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace controllers

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::controllers::ctrl_command_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::controllers::ctrl_command_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::controllers::ctrl_command_<ContainerAllocator> > {
  static const char* value() 
  {
    return "565f48a2a630e6ab6b4fb72196ae65ee";
  }

  static const char* value(const  ::controllers::ctrl_command_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x565f48a2a630e6abULL;
  static const uint64_t static_value2 = 0x6b4fb72196ae65eeULL;
};

template<class ContainerAllocator>
struct DataType< ::controllers::ctrl_command_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controllers/ctrl_command";
  }

  static const char* value(const  ::controllers::ctrl_command_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::controllers::ctrl_command_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Roll in radians\n\
float64 roll \n\
# Pitch in radians \n\
float64 pitch\n\
# yaw rate in rad/s\n\
float64 rateyaw\n\
# Thrust normalized between thrustmin to thrustmax \n\
float64 thrust\n\
\n\
";
  }

  static const char* value(const  ::controllers::ctrl_command_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::controllers::ctrl_command_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::controllers::ctrl_command_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.rateyaw);
    stream.next(m.thrust);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ctrl_command_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controllers::ctrl_command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::controllers::ctrl_command_<ContainerAllocator> & v) 
  {
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "rateyaw: ";
    Printer<double>::stream(s, indent + "  ", v.rateyaw);
    s << indent << "thrust: ";
    Printer<double>::stream(s, indent + "  ", v.thrust);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CONTROLLERS_MESSAGE_CTRL_COMMAND_H

